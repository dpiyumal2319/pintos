		     +--------------------------+
       	 |		     CS2043	        	|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+



---- GROUP ----
Group 02

>> Fill in the names and email addresses of your group members.
200193U - Chahura Gunasekara
200157N - Chandima Ekanayaka

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

None

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

How to setup the stack?
------------------------
The following functions were used to extract the command line arguments and 
arrange them in the right order before providing them to the function to be executed

1.  static bool setup_stack (void **esp, char* argv[], int argc) 
Setup the stack after page is installed, when the stack has been initialized.

2. tid_t process_execute (const char *file_name) 
Starts a new thread running a user program loaded from filename which is
the command line string.

The function extract_cmd_name was used to extract the command name from the command
line string and a new thread was created by that function name to run the start_process
function. The extract_cmd_name extract and function name from the command line string and
returns only the string with the command line arguments seperated by spaces.

3. static void start_process (void *file_name_)
A thread function that loads a user process and starts it running. This function initializes
the interrupt frame and page for the function and calls the load function.

How do you arrange for the elements of argv[] to be in the right order?
-----------------------------------------------------------------------
bool load (const char *file_name, void (**eip) (void), void **esp)

The load function gets the filename and extracts the command line arguments and uses the 
extract_cmd_args function to split the command line string containing only the comand line 
arguments. It adds each of the seperated arguments to the argv[] array which is initialized to
a maximum fixed size. This function effectively splits the command line arguments and inserts 
them to the argv array in the correct order.

How to avoid overflowing the stack page?
----------------------------------------
We check for a page fault occurance using the page_fault function which terminates using
exit(-1) the process on the occurance of a page_fault. Also we check whether the esp pointer
is pointing to a valid address and if not we terminate the process using exit(-1) 

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?
Both strtok and strtok_r are used to split a string into tokens, but unlike strtok, 
A third save_ptr argument is a char-pointer * variable which strtok r() uses internally in
keep context between subsequent calls without hampering its earlier course of action
This is required as in pintos, the kernel separates commands into command line (executable name) 
and arguments. So we need to put the address of the arguments somewhere we can reach later.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

1) Shortening the time inside kernel
2) Robust checking. Checking whether the executable is there before passing it
to kernel to avoid kernel fail. Checking whether the arguments are over the
limit. 
3) Once it can separate the commands, it can do advanced pre-processing, acting
more like an interpreter not only an interface. Like passing more than 1 set
of command line at a time, i.e. cd; mkdir tmp; touch test; and pipe.


			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In thread.h

/* used to indicate the child’s status, owned by wait-syscall */

typedef struct child
   {  
      tid_t tid;
      int status;
      bool is_alive;
      bool waited_once;
      struct thread* parent;
      struct list_elem elem;
   }child_t;

The child struct is used to track the child threads of a thread

struct file_desc{
    int fd;
    char** name;
    struct file* file;
    struct list_elem elem;
};

The file_desc strcut is used to keep track of files opened by a thread

struct thread
{
  ...
  #ifdef USERPROG
    ...
    /* direct parent thread id */
    tid_t parent_id;                    

   /* Owned by userprog/process.c. */
    uint32_t *pagedir;                  /* Page directory. */
    struct thread* parent;              /* Parent process */
    struct list children;               /* List to hold the children */
    tid_t waiting_for;           /* Child tid for which the thread is waiting for*/
    struct semaphore sema;              /* Semaphore to lock the child threads */

    struct file* executable_file;            

    unsigned fd_count;             /* Number of open files */
    struct list files;             /* Array to keep reference to file pointers*/

  #endif
  ...
}

This section of the thread struct is used to keep track of details required to track
the child processes of the process and the files opened by the thread. 


>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

File descriptors are handled used the file_desc struct and here we store the
file descrriptor ID (fd) the name of the file (name) and the pointer to the actual
opened file (file). In this implementation the file descriptor is unique for each 
single process and its the given the next available fd_count value of the process.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

Read:
1. Check if fd(esp), buffer(esp+1) and size(esp+2) are valid pointers, if so invoke the
read function by passing the arguments
2. Check if the buffer+size points to a valid pointer else return exit(-1)
3. If fd is STDOUT_FILENO invoke exit(-1)
4. If fd is STDIN_FILENO put the content in the buffer
5. If it's a normal file descriptor, obtain the lock for the file, read the file, get status
release the lock and return the address.

Write:
1. Check if fd(esp), buffer(esp+1) and size(esp+2) are valid pointers, if so invoke the
write function by passing the arguments
2. Check if the buffer+size points to a valid pointer else return exit(-1)
3. If fd is STDIN_FILENO invoke exit(-1)
4. If fd is STDOUT_FILENO put the content in the buffer
5. If it's a normal file descriptor, obtain the lock for the file, write to the file, get actual
size written to the file, release the lock and return the actual size.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

For a full page of data:
The minimum number of page table inspections would be 1.
If the first inspection(pagedir_get_page) returned a page head back(which can be identified by the address) 
it is not needed to inspect any more, it can contain one page of data.

The maximum number might be 4096 if it’s not contiguous, in that case 
every address should be checked to ensure a valid access. When it’s contiguous, the
maximum number of checks would be 2, if we get a kernel virtual address that is not a
page head, we surely want to check the start pointer and the end pointer of the
full page data, see if it’s mapped. 


For 2 bytes of data:
The minimum number will be 1. Similar to the above case if we get back a kernel virtual address
that has more than 2 bytes space to the end of page, we know it’s in this page,
another inspection is not necessary.

The greatest number will also be 2. If it’s not contiguous or if it’s contiguous
but we get back a kernel virtual address that only 1 byte far from the end of
page, we have to inspect where the other byte is located. 

Improvements:
We don’t see much room to improve. 


>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

wait syscall is implemented using the process_wait function.

A new struct called child is used to store information about the child process and
the attribute status in that struct is used to store the exit status of the child thread.
Also a pointer to the parent thread is included in the child struct to allow the child to
find its parent and set it's status if parent still exists.
A list of child structs is maintained in each thread struct.

In the process_wait function we get the child processes tid value. This tid value is used
to find the child process from the children list in the current thread. If the child process is not
found in the children list of the current thread or we already waited for the child, return -1. 
Otherwise, sema_down the semaphore of the parent of the child process and set the child processe's
is_alive status to false. Return the status of the child process.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

Firstly, avoiding bad user memory access is done by checking if the stack pointer, 
is pointing to a valid address using the check_valid_uaddr function. This function 
checks if the user address is valid and is mapped in the process’s page directory.
This check will be made to all the esp processes that are accessed in the function call
and based on the system call we should if some other addresses are also valid 
For example: Taking “write” system call as an example, the esp
pointer and the three arguments pointer will be checked first, if anything is
invalid, the process is terminated. Then after enter into write function, the buffer
beginning pointer and the buffer ending pointer(buffer + size - 1) will be
checked before being used. 

Secondly when the error occurs it is handled inside the page_fault exception.
We reset the eip pointer to the eax pointer and the eax pointer to 0xffffffff
and exit(-1) to terminate the process.
For example, bad-jump2-test( *(int*)0xC0000000 = 42; ) it’s trying to write an invalid address,
there is no way we could prevent this case happen, so, when inside page_fault exception handler,
the eax and eip addresses are reset as mentioned above and the process is terminated with exit(-1)


---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

A child struct is used to represent each child process and it's status. A list of
child structs are stored in each thread in a list called children. A semaphore is
used to synchronize the wait process and avoid race conditions. The child process
is responsible to set it’s status in parent’s thread struct. When parent exits, 
the list inside it will be free.

So, in the cases above:
* P calls wait(C) before C exits
P will sema down its semaphore and the child continues to run. After the C
finishes its execution, it will sema up the semaphore. This allows the parent thread to 
continue from where it stopped. The parent thread sets the alive status of the child 

* P calls wait(C) after C exits
P will acquire the monitor and found out C already exits and check it’s exit
status directly.

* P terminates without waiting before C exits
The list inside P will be free, the lock will be released, and thread exit call will
release all the resources allocated by P.When C tries to set it’s status and find out 
parent has exited, it will ignore it and continue to execute.

* P terminates after C exits
All resources used by C are freed when C exits and resources used by P are freed when P
exits


---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?
It was done by validating the address before using it this always reduces
the possibility that a program tries to access kernel space. 

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?
Advantages:
1) Thread-struct’s space is minimized
2) Can directly access the file object using the file desc making file accessing fast


Disadvantages:
1) Consumes space from the kernal space. User programs can create many files and overwhelm
the kernel space
2) Inability to access file descriptors globally prevents other processes from using the file pointers
of files opened by other pointers. Each process should open a file on their own to use it

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?
No changes were made

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?